job("DevOpsTask6Job1"){
  description("This is first job of groovy project")
        scm {
                github('chiragnagar1/test.git','master')
        }

        triggers {
                scm("* * * * *")
        }
     steps {
        shell('''
        sudo mkdir -p /root/DevOpsTask6
        sudo cp -rvf * /root/DevOpsTask6
                ''')
    }
}
job("DevOpsTask6Job2"){
  description("This is second job of groovy project")
        triggers {
        upstream('DevOpsTask6Job1', 'SUCCESS')
    }
     steps {
        shell('''
                cd /root/DevOpsTask6
                if ls | grep .html
                then
                if sudo kubectl get pods | grep html-deploy
                then
                echo "Already Running"
                else
                sudo kubectl delete all --all
                sudo kubectl run html-pod --image=httpd
                sleep 30
                sudo kubectl cp *.html  html-pod:/usr/local/apache2/htdocs
                sudo kubectl expose pods html-pod --type=NodePort --port=80
                fi
                elif ls| grep .php
                then
                if sudo kubectl get pods | grep php-deploy
                then
                echo "Already Running"
                else
                sudo kubectl delete all --all
                sudo kubectl run php-pod --image=php:latest
                sleep 30
                sudo kubectl cp * php-pod:/usr/src/myapp
                sudo kubectl expose pod php-pod --type=NodePort --port=80
                fi
                fi
                ''')
    }
}
job("DevOpsTask6Job3")
{
        description("This is third job of groovy project")
        triggers {
        upstream('DevOpsTask6Job2', 'SUCCESS')
    }
         steps {
        shell('''
                website_status=$(curl -o /dev/null -s -w "%{http_code}\n" http://192.168.43.34:30000)

               if [[ "$website_status" -eq 200 ]]
               then
                   :
               else
                  exit 1
               fi
        ''')
      }
}

buildPipelineView('Groovy project') {
    filterBuildQueue()
    filterExecutors()
    title('Groovy Pipeline')
    displayedBuilds(3)
    selectedJob('Groovy 1')
    alwaysAllowManualTrigger()
    showPipelineParameters()
    refreshFrequency(30)
}
